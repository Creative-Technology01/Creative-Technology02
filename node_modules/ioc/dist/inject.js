'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = inject;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _reactDisplayName = require('react-display-name');

var _reactDisplayName2 = _interopRequireDefault(_reactDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inject(injectables) {
  return function (Component) {
    var _class, _temp;

    var InjectHoc = (_temp = _class = function (_React$Component) {
      (0, _inherits3.default)(InjectHoc, _React$Component);

      function InjectHoc() {
        (0, _classCallCheck3.default)(this, InjectHoc);
        return (0, _possibleConstructorReturn3.default)(this, (InjectHoc.__proto__ || (0, _getPrototypeOf2.default)(InjectHoc)).apply(this, arguments));
      }

      (0, _createClass3.default)(InjectHoc, [{
        key: 'render',
        value: function render() {
          var _this2 = this;

          var injectedProps = {};
          (0, _keys2.default)(injectables).forEach(function (injectedKey) {
            injectedProps[injectedKey] = _this2.context[injectedKey];
          });

          var propsWithInjectables = (0, _extends3.default)({}, injectedProps, this.props);
          return _react2.default.createElement(Component, propsWithInjectables);
        }
      }]);
      return InjectHoc;
    }(_react2.default.Component), _class.contextTypes = injectables, _class.displayName = 'Inject(' + (0, _reactDisplayName2.default)(Component) + ')', _temp);

    // copy all non-React static methods

    (0, _hoistNonReactStatics2.default)(InjectHoc, Component);

    // add next.js specific method
    if (Component.getInitialProps) {
      InjectHoc.getInitialProps = function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(context) {
          var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var injectedProps;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:

                  // filter out requested values from the provided "payload"
                  injectedProps = {};

                  (0, _keys2.default)(injectables).forEach(function (injectedKey) {
                    injected[injectedKey] && (injectedProps[injectedKey] = injected[injectedKey]);
                  });
                  return _context.abrupt('return', Component.getInitialProps(context, injectedProps));

                case 3:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function (_x2) {
          return _ref.apply(this, arguments);
        };
      }();
    }

    return InjectHoc;
  };
}