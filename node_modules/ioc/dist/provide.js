'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.default = provide;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _reactDisplayName = require('react-display-name');

var _reactDisplayName2 = _interopRequireDefault(_reactDisplayName);

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function provide(injectables) {

  var injectableTypes = {};
  var injectableValues = {};

  (0, _keys2.default)(injectables).forEach(function (name) {
    if (injectables[name] instanceof _types.TypedObject) {
      injectableTypes[name] = injectables[name].type;
      injectableValues[name] = injectables[name].value;
    } else {
      // try to guess simple prop-type
      injectableTypes[name] = getPropType(injectables[name]);
      injectableValues[name] = injectables[name];
    }
  });

  return function (Component) {
    var _class, _temp;

    var provideHoc = (_temp = _class = function (_React$Component) {
      (0, _inherits3.default)(provideHoc, _React$Component);

      function provideHoc() {
        (0, _classCallCheck3.default)(this, provideHoc);
        return (0, _possibleConstructorReturn3.default)(this, (provideHoc.__proto__ || (0, _getPrototypeOf2.default)(provideHoc)).apply(this, arguments));
      }

      (0, _createClass3.default)(provideHoc, [{
        key: 'getChildContext',
        value: function getChildContext() {
          return injectableValues;
        }
      }, {
        key: 'render',
        value: function render() {
          var propsWithInjectables = (0, _extends3.default)({}, injectableValues, this.props);
          return _react2.default.createElement(Component, propsWithInjectables);
        }
      }]);
      return provideHoc;
    }(_react2.default.Component), _class.displayName = 'Provide(' + (0, _reactDisplayName2.default)(Component) + ')', _class.childContextTypes = injectableTypes, _temp);

    // copy all non-React static methods

    (0, _hoistNonReactStatics2.default)(provideHoc, Component);

    // add next.js specific method
    if (Component.getInitialProps) {
      provideHoc.getInitialProps = function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(context) {
          var injected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  injected = (0, _extends3.default)({}, injected, injectableValues);
                  return _context.abrupt('return', Component.getInitialProps(context, injected));

                case 2:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function (_x2) {
          return _ref.apply(this, arguments);
        };
      }();
    }

    return provideHoc;
  };
}

// -- Subroutines

function getPropType(value) {
  var type = getType(value);

  // in propTypes `function` is `func`
  if (type === 'function') {
    type = 'func';
  }

  return _propTypes2.default[type];
}

/*
 * Got it from `prop-types` package
 * to help with auto-guessing propType
 */
function getType(value) {

  var type = typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value);

  if (Array.isArray(value)) {
    return 'array';
  }

  if (value instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }

  if (isSymbol(type, value)) {
    return 'symbol';
  }

  return type;
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof _symbol2.default === 'function' && propValue instanceof _symbol2.default) {
    return true;
  }

  return false;
}